# StarExec Helm Chart - Consolidated Configuration
replicaCount: 1

image:
  repository: ghcr.io/starexecmiami/starexec-arc
  pullPolicy: Always
  tag: "latest"

# Service Account Configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Security Contexts - Simplified for EFS compatibility
podSecurityContext:
  fsGroup: 999  # MySQL user ID
  runAsUser: 0  # Run as root initially
  fsGroupChangePolicy: "OnRootMismatch"
  supplementalGroups: [999]

securityContext:
  privileged: true
  runAsUser: 0
  capabilities:
    add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER

# Service Configuration - LoadBalancer with session affinity
service:
  type: LoadBalancer
  port: 443
  targetPort: 443
  sessionAffinity: ClientIP

# Ingress Configuration - TLS terminated by the ingress controller
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    # Disable SSL passthrough so the ingress can terminate TLS and apply header rewrites
    nginx.ingress.kubernetes.io/ssl-passthrough: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true"

    # Enhanced header forwarding for proper URL construction (let the controller handle proxy_pass)
    nginx.ingress.kubernetes.io/server-snippet: |
      location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Original-URI $request_uri;
      }
    # cert-manager.io/cluster-issuer: letsencrypt-prod # Example if using cert-manager
  hosts:
    - host: starexec.local
      paths:
        - path: /
          pathType: Prefix
  tls: true
  requests:
    cpu: "250m"
    memory: "512Mi"
  limits:
    cpu: "500m"
    memory: "1Gi"

# Storage Configuration - Single shared volume
persistence:
  storageClassName: "efs-sc"
  shared:
    enabled: true
    size: "100Gi"
    accessModes: ["ReadWriteMany"]
    mountPath: "/starexec"

# Application Configuration
starexecConfig:
  ssh:
    username: "starexec"
    hostMachine: "host.docker.internal"
    port: "22"
    socketPath: "/run/user/1000/podman/podman.sock"

# Secret Configurations
sshSecret:
  create: true
  existingSecretName: ""
  secretName: "starexec-ssh-key"
  privateKey: ""

tlsSecret:
  create: true # Whether Helm should create the secret
  existingSecretName: "" # Use if create is false and you have an existing secret
  secretName: "starexec-tls-secret" # Default name if create is true

# Probes configuration 
probes:
  readiness:
    enabled: true
    command:
      - "/bin/bash"
      - "-c"
      - |
        set -e
        echo "Readiness probe: Starting checks..."
        
        # Check MySQL is responding
        echo "Checking MySQL connectivity..."
        if ! mysqladmin ping -u root --silent --connect-timeout=5; then
          echo "ERROR: MySQL is not responding"
          exit 1
        fi
        echo "MySQL check passed"
        
        # Check Tomcat has fully started
        echo "Checking Tomcat startup status..."
        if ! grep -q "Server startup in" /project/apache-tomcat-7/logs/catalina.*.log 2>/dev/null; then
          echo "ERROR: Tomcat has not fully started"
          exit 1
        fi
        echo "Tomcat startup check passed"
        
        # Check Apache is running
        echo "Checking Apache service status..."
        if ! (service apache2 status | grep -q "is running" || pgrep -f "apache2" > /dev/null); then
          echo "ERROR: Apache is not running"
          exit 1
        fi
        echo "Apache service check passed"
        
        # Check Tomcat is responding
        echo "Checking Tomcat HTTP response..."
        if ! curl -s -k --max-time 5 -I http://localhost:8080 | grep -q "200\|302"; then
          echo "ERROR: Tomcat is not responding on port 8080"
          exit 1
        fi
        echo "Tomcat HTTP check passed"
        
        echo "Readiness probe: All checks passed"
        exit 0
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 10
    failureThreshold: 10
    successThreshold: 1
  
  liveness:
    enabled: true
    command:
      - "/bin/bash" 
      - "-c"
      - |
        set -e
        echo "Liveness probe: Starting checks..."
        
        # Check MySQL is alive
        echo "Checking MySQL connectivity..."
        if ! mysqladmin ping -u root --silent --connect-timeout=5; then
          echo "ERROR: MySQL is not responding"
          exit 1
        fi
        echo "MySQL check passed"
        
        # Check Apache is running
        echo "Checking Apache service status..."
        if ! (service apache2 status | grep -q "is running" || pgrep -f "apache2" > /dev/null); then
          echo "ERROR: Apache is not running"
          exit 1
        fi
        echo "Apache service check passed"
        
        # Check HTTPS endpoint is accessible
        echo "Checking HTTPS endpoint accessibility..."
        if ! curl -k --fail --silent --max-time 8 -I https://localhost/ | grep -iq "200\|302\|Location"; then
          echo "ERROR: HTTPS endpoint is not accessible"
          exit 1
        fi
        echo "HTTPS endpoint check passed"
        
        echo "Liveness probe: All checks passed"
        exit 0
    initialDelaySeconds: 180
    periodSeconds: 30
    timeoutSeconds: 15
    failureThreshold: 3
    successThreshold: 1
  
  startup:
    enabled: true
    command:
      - "/bin/bash"
      - "-c"
      - |
        set -e
        echo "Startup probe: Starting checks..."
        
        # Check MySQL is accessible
        echo "Checking MySQL connectivity..."
        if ! mysqladmin ping -u root --silent --connect-timeout=5; then
          echo "ERROR: MySQL is not responding"
          exit 1
        fi
        echo "MySQL check passed"
        
        # Check Tomcat process is running
        echo "Checking Tomcat process..."
        if ! ps -ef | grep -v grep | grep -q "org.apache.catalina.startup.Bootstrap start"; then
          echo "ERROR: Tomcat process is not running"
          exit 1
        fi
        echo "Tomcat process check passed"
        
        # Check Apache is running
        echo "Checking Apache service status..."
        if ! (service apache2 status | grep -q "is running" || pgrep -f "apache2" > /dev/null); then
          echo "ERROR: Apache is not running"
          exit 1
        fi
        echo "Apache service check passed"
        
        # Basic connectivity check
        echo "Checking basic connectivity..."
        if ! (curl -s --max-time 5 http://localhost:8080 > /dev/null 2>&1 || curl -s -k --max-time 5 https://localhost/ > /dev/null 2>&1); then
          echo "ERROR: Basic connectivity check failed"
          exit 1
        fi
        echo "Basic connectivity check passed"
        
        echo "Startup probe: All checks passed"
        exit 0
    initialDelaySeconds: 60
    periodSeconds: 15
    timeoutSeconds: 12
    failureThreshold: 30
    successThreshold: 1