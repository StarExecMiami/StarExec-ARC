replicaCount: 1

image:
  repository: ghcr.io/starexecmiami/starexec-arc
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: LoadBalancer # Or ClusterIP if using Ingress controller primarily
  port: 443
  targetPort: 443 # Target port on the pod (Apache's HTTPS port)
  # nodePort: # Required if type is NodePort

ingress:
  enabled: true
  className: "" # Specify if using a non-default IngressClass
  annotations:
    # Adjust based on your Ingress controller (e.g., nginx, traefik)
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-Forwarded-Host $host;
    # cert-manager.io/cluster-issuer: letsencrypt-prod # Example if using cert-manager
  hosts:
    - host: starexec.local # Replace with your domain
      paths:
        - path: /
          pathType: Prefix
  tls: true # Set to false to disable TLS configuration

resources:
  limits:
    cpu: "2"
    memory: "4Gi"
  requests:
    cpu: "1"
    memory: "2Gi"

# Persistence configuration (assuming EFS CSI Driver and StorageClass exist)
persistence:
  storageClassName: "efs-sc" # Name of the StorageClass for EFS
  voldb:
    enabled: true
    size: 10Gi # Adjust size as needed
    accessModes: ["ReadWriteMany"]
    # volumeHandle: <efs-id>::<access-point-id> # Needed if StorageClass doesn't handle it
  volstar:
    enabled: true
    size: 50Gi # Adjust size as needed
    accessModes: ["ReadWriteMany"]
    # volumeHandle: <efs-id>::<access-point-id>
  volpro:
    enabled: true
    size: 20Gi # Adjust size as needed
    accessModes: ["ReadWriteMany"]
    # volumeHandle: <efs-id>::<access-point-id>
  volexport:
    enabled: true
    size: 5Gi # Adjust size as needed
    accessModes: ["ReadWriteMany"]
    # volumeHandle: <efs-id>::<access-point-id>

# Configuration passed via ConfigMap
starexecConfig:
  ssh:
    username: "starexec" # Default SSH username for Podman connection
    hostMachine: "host.docker.internal" # Default host machine address
    port: "22" # Default SSH port
    socketPath: "/run/user/1000/podman/podman.sock" # Default socket path

# SSH Key Secret configuration
sshSecret:
  create: true # Whether Helm should create the secret
  existingSecretName: "" # Use if create is false and you have an existing secret
  secretName: "starexec-ssh-key" # Default name if create is true
  privateKey: "" # Base64 encoded private SSH key. If empty and create is true, generate? (Helm can't easily generate)

# TLS Secret configuration
tlsSecret:
  create: true # Whether Helm should create the secret
  existingSecretName: "" # Use if create is false and you have an existing secret
  secretName: "starexec-tls-secret" # Default name if create is true

nodeSelector: {}
tolerations: []
affinity: {}

# Probes configuration 
probes:
  readiness:
    enabled: true
    command: 
      - "/bin/bash"
      - "-c"
      - |
        set -e
        echo "Readiness probe: Starting checks..."
        
        # Check MySQL is responding
        echo "Checking MySQL connectivity..."
        if ! mysqladmin ping -u root --silent --connect-timeout=5; then
          echo "ERROR: MySQL is not responding"
          exit 1
        fi
        echo "MySQL check passed"
        
        # Check Tomcat has fully started
        echo "Checking Tomcat startup status..."
        if ! grep -q "Server startup in" /project/apache-tomcat-7/logs/catalina.*.log 2>/dev/null; then
          echo "ERROR: Tomcat has not fully started"
          exit 1
        fi
        echo "Tomcat startup check passed"
        
        # Check Apache is running
        echo "Checking Apache service status..."
        if ! (service apache2 status | grep -q "is running" || pgrep -f "apache2" > /dev/null); then
          echo "ERROR: Apache is not running"
          exit 1
        fi
        echo "Apache service check passed"
        
        # Check Tomcat is responding
        echo "Checking Tomcat HTTP response..."
        if ! curl -s -k --max-time 5 -I http://localhost:8080 | grep -q "200\|302"; then
          echo "ERROR: Tomcat is not responding on port 8080"
          exit 1
        fi
        echo "Tomcat HTTP check passed"
        
        echo "Readiness probe: All checks passed"
        exit 0
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 10
    failureThreshold: 10
    successThreshold: 1
  
  liveness:
    enabled: true
    command: 
      - "/bin/bash"
      - "-c"
      - |
        set -e
        echo "Liveness probe: Starting checks..."
        
        # Check MySQL is alive
        echo "Checking MySQL connectivity..."
        if ! mysqladmin ping -u root --silent --connect-timeout=5; then
          echo "ERROR: MySQL is not responding"
          exit 1
        fi
        echo "MySQL check passed"
        
        # Check Apache is running
        echo "Checking Apache service status..."
        if ! (service apache2 status | grep -q "is running" || pgrep -f "apache2" > /dev/null); then
          echo "ERROR: Apache is not running"
          exit 1
        fi
        echo "Apache service check passed"
        
        # Check HTTPS endpoint is accessible
        echo "Checking HTTPS endpoint accessibility..."
        if ! curl -k --fail --silent --max-time 8 -I https://localhost/ | grep -iq "200\|302\|Location"; then
          echo "ERROR: HTTPS endpoint is not accessible"
          exit 1
        fi
        echo "HTTPS endpoint check passed"
        
        echo "Liveness probe: All checks passed"
        exit 0
    initialDelaySeconds: 180
    periodSeconds: 30
    timeoutSeconds: 15
    failureThreshold: 3
    successThreshold: 1
  
  startup:
    enabled: true
    command: 
      - "/bin/bash"
      - "-c"
      - |
        set -e
        echo "Startup probe: Starting checks..."
        
        # Check MySQL is accessible
        echo "Checking MySQL connectivity..."
        if ! mysqladmin ping -u root --silent --connect-timeout=5; then
          echo "ERROR: MySQL is not responding"
          exit 1
        fi
        echo "MySQL check passed"
        
        # Check Tomcat process is running
        echo "Checking Tomcat process..."
        if ! ps -ef | grep -v grep | grep -q "org.apache.catalina.startup.Bootstrap start"; then
          echo "ERROR: Tomcat process is not running"
          exit 1
        fi
        echo "Tomcat process check passed"
        
        # Check Apache is running
        echo "Checking Apache service status..."
        if ! (service apache2 status | grep -q "is running" || pgrep -f "apache2" > /dev/null); then
          echo "ERROR: Apache is not running"
          exit 1
        fi
        echo "Apache service check passed"
        
        # Basic connectivity check
        echo "Checking basic connectivity..."
        if ! (curl -s --max-time 5 http://localhost:8080 > /dev/null 2>&1 || curl -s -k --max-time 5 https://localhost/ > /dev/null 2>&1); then
          echo "ERROR: Basic connectivity check failed"
          exit 1
        fi
        echo "Basic connectivity check passed"
        
        echo "Startup probe: All checks passed"
        exit 0
    initialDelaySeconds: 60
    periodSeconds: 15
    timeoutSeconds: 12
    failureThreshold: 30
    successThreshold: 1

# Domain name
domain: starexec.local

# --- Main Deployment Configuration ---
deployment:
  name: starexec
  replicas: 1
  imagePullSecrets: []
  
  # Resource requests and limits
  resources:
    requests:
      cpu: 1
      memory: 2Gi
    limits:
      cpu: 2
      memory: 4Gi
  
  # Container lifecycle management
  lifecycle:
    preStop:
      exec:
        command: ["/bin/bash", "-c", "/project/apache-tomcat-7/bin/shutdown.sh; sleep 10; mysqladmin -u root shutdown"]
  
  # Pod security context
  securityContext:
    privileged: true
    runAsUser: 0