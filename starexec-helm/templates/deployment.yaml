# starexec-helm/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "starexec.fullname" . }}
  labels:
    {{- include "starexec.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "starexec.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "starexec.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "starexec.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 60
      initContainers:
      - name: init-volume
        image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
        securityContext:
          runAsUser: 0  # Run as root for initial setup
          capabilities:
            add:
              - CHOWN
              - DAC_OVERRIDE
        command:
          - sh
          - -c
          - >
            echo "Initializing volumes with proper permissions..." &&
            mkdir -p /starexec/voldb &&
            mkdir -p /starexec/StarExec-deploy &&
            mkdir -p /starexec/volpro &&
            mkdir -p /starexec/volexport &&
            if [ "$(ls -A /starexec/voldb)" ]; then 
              echo "vol-db is not empty, ensuring permissions...";
              chown -R 999:999 /starexec/voldb 2>/dev/null || echo "Note: Could not change ownership (expected in managed storage)";
              chmod -R 755 /starexec/voldb 2>/dev/null || echo "Note: Could not change permissions";
            else 
              echo "vol-db is empty, copying initial data...";
              cp -r /var/lib/mysql/* /starexec/voldb/;
              chown -R 999:999 /starexec/voldb 2>/dev/null || echo "Note: Could not change ownership";
              chmod -R 755 /starexec/voldb 2>/dev/null || echo "Note: Could not change permissions";
            fi &&
            if [ "$(ls -A /starexec/StarExec-deploy)" ]; then echo "StarExec-deploy is not empty"; else cp -r /home/starexec/StarExec-deploy/* /starexec/StarExec-deploy/; fi &&
            if [ "$(ls -A /starexec/volpro)" ]; then echo "vol-pro is not empty"; else cp -r /project/* /starexec/volpro/; fi &&
            if [ "$(ls -A /starexec/volexport)" ]; then echo "vol-export is not empty"; else cp -r /export/* /starexec/volexport/; fi
        volumeMounts:
        - name: shared-storage
          mountPath: /starexec
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          workingDir: /home/starexec/StarExec-deploy
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
          {{- if .Values.probes.startup.enabled }}
          startupProbe:
            exec:
              command:
              {{- toYaml .Values.probes.startup.command | nindent 14 }}
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            successThreshold: {{ .Values.probes.startup.successThreshold }}
          {{- end }}
          {{- if .Values.probes.readiness.enabled }}
          readinessProbe:
            exec:
              command:
              {{- toYaml .Values.probes.readiness.command | nindent 14 }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
          {{- end }}
          {{- if .Values.probes.liveness.enabled }}
          livenessProbe:
            exec:
              command:
              {{- toYaml .Values.probes.liveness.command | nindent 14 }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
          {{- end }}
          env:
            - name: SSH_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: {{ include "starexec.fullname" . }}-config
                  key: SSH_USERNAME
            - name: HOST_MACHINE
              valueFrom:
                configMapKeyRef:
                  name: {{ include "starexec.fullname" . }}-config
                  key: HOST_MACHINE
            - name: SSH_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ include "starexec.fullname" . }}-config
                  key: SSH_PORT
            - name: SSH_SOCKET_PATH
              valueFrom:
                configMapKeyRef:
                  name: {{ include "starexec.fullname" . }}-config
                  key: SSH_SOCKET_PATH
            - name: STAREXEC_MANAGED_STORAGE
              value: "true"
            - name: MYSQL_UID
              value: "999"
            - name: MYSQL_GID
              value: "999"
            - name: GIT_DISCOVERY_ACROSS_FILESYSTEM
              value: "1"
            - name: STAREXEC_SUPPRESS_CHOWN_WARNINGS
              value: "true"
            - name: STAREXEC_CONTAINERIZED
              value: "true"
          volumeMounts:
            - name: shared-storage
              mountPath: /var/lib/mysql
              subPath: voldb
            - name: shared-storage
              mountPath: /home/starexec/StarExec-deploy
              subPath: StarExec-deploy
            - name: shared-storage
              mountPath: /project
              subPath: volpro
            - name: shared-storage
              mountPath: /export
              subPath: volexport
            - name: ssh-key
              mountPath: "/root/.ssh/starexec_podman_key"
              subPath: "starexec_podman_key"
              readOnly: true
            - name: tls-certs
              mountPath: "/etc/ssl/certs/localhost.crt"
              subPath: "tls.crt"
            - name: tls-certs
              mountPath: "/etc/ssl/private/localhost.key"
              subPath: "tls.key"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: shared-storage
          persistentVolumeClaim:
            claimName: {{ include "starexec.fullname" . }}-shared
        - name: ssh-key
          secret:
            secretName: {{ .Values.sshSecret.secretName | default (printf "%s-ssh-key" (include "starexec.fullname" .)) }}
            optional: false
        - name: tls-certs
          secret:
            secretName: {{ .Values.tlsSecret.secretName | default (printf "%s-tls-secret" (include "starexec.fullname" .)) }}
            optional: false
{{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
{{- end }}
