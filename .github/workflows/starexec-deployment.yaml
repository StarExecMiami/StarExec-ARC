name: Deploy to AWS

on:
  push:
    branches:
      - master
    paths:
      - 'starexec-kubernetes/**'
  workflow_dispatch:

concurrency:
  group: starexec-terraform
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write  # For OIDC authentication

jobs:
  deploy:
    name: Deploy StarExec to AWS
    runs-on: ubuntu-latest
    environment: development
    timeout-minutes: 60

    env:
      AWS_REGION: us-east-1
      DOMAIN: starexec-arc.net

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up AWS CLI with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cache Terraform plugins and modules
        uses: actions/cache@v4
        with:
          path: |
              ~/.terraform.d/plugin-cache
              starexec-kubernetes/terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
              ${{ runner.os }}-terraform-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make jq

      - name: Install kubectl
        run: |
          KUBECTL_VERSION=$(curl -L -s https://dl.k8s.io/release/stable.txt)
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/${KUBECTL_VERSION}/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Initialize Terraform
        run: make init DOMAIN=${{ env.DOMAIN }}
        working-directory: starexec-kubernetes/terraform

      - name: Validate Terraform configuration
        run: make validate DOMAIN=${{ env.DOMAIN }}
        working-directory: starexec-kubernetes/terraform

      - name: Configure AWS CLI region
        run: aws configure set region $AWS_REGION
        working-directory: starexec-kubernetes/terraform

      - name: Plan Terraform changes
        run: |
          set -euo pipefail  # Enable strict error handling
          make plan DOMAIN=${{ env.DOMAIN }} > plan.log 2>&1 || (
            echo "Plan failed or timed out, attempting to force unlock..."
            cat plan.log
            LOCK_ID=$(grep -oE 'ID:[[:space:]]+[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' plan.log | head -n 1 | awk '{print $2}')
            if [ -n "$LOCK_ID" ]; then
              echo "Attempting to unlock with ID: $LOCK_ID"
              terraform force-unlock -force "$LOCK_ID" || true
            else
              echo "Could not extract lock ID, skipping unlock"
            fi
            echo "Retrying plan after unlock attempt..."
            make plan DOMAIN=${{ env.DOMAIN }} -lock=false || make plan DOMAIN=${{ env.DOMAIN }}
          )
        working-directory: starexec-kubernetes/terraform

      - name: Deploy infrastructure
        run: |
          set -euo pipefail  # Enable strict error handling
          make apply DOMAIN=${{ env.DOMAIN }} > deploy.log 2>&1 || (
            echo "Deploy failed or timed out, attempting to force unlock..."
            cat deploy.log
            LOCK_ID=$(grep -oE 'ID:[[:space:]]+[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' deploy.log | head -n 1 | awk '{print $2}')
            if [ -n "$LOCK_ID" ]; then
              echo "Attempting to unlock with ID: $LOCK_ID"
              terraform force-unlock -force "$LOCK_ID" || true
            else
              echo "Could not extract lock ID, skipping unlock"
            fi
            echo "Retrying deploy after unlock attempt..."
            make apply DOMAIN=${{ env.DOMAIN }} -lock=false || make apply DOMAIN=${{ env.DOMAIN }}
          )
        working-directory: starexec-kubernetes/terraform
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          DOMAIN: ${{ env.DOMAIN }}

      - name: Show cluster information
        run: make info
        working-directory: starexec-kubernetes/terraform

      - name: Extract LoadBalancer URL
        id: lb_url
        run: |
          HOST=$(kubectl get svc starexec-service \
            -n default \
            -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "url=https://$HOST" >> $GITHUB_OUTPUT

      - name: Add Service URL to GitHub Actions summary
        run: |
          echo "### âœ… StarExec Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”— [Access the app here](${{ steps.lb_url.outputs.url }})" >> $GITHUB_STEP_SUMMARY

      - name: Notify deployment success
        if: success()
        run: echo "Deployment completed successfully!"

      - name: Notify deployment failure
        if: failure()
        run: echo "Deployment failed. Please check the logs."