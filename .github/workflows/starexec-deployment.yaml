name: Deploy to AWS

on:
  push:
    branches:
      - master
    paths:
      - 'starexec-kubernetes/**'
  workflow_dispatch:

concurrency:
  group: starexec-terraform
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy StarExec to AWS
    runs-on: ubuntu-latest
    environment: development
    timeout-minutes: 60

    env:
      AWS_REGION: us-east-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cache Terraform plugins and modules
        uses: actions/cache@v3
        with:
          path: |
              ~/.terraform.d/plugin-cache
              starexec-kubernetes/terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
              ${{ runner.os }}-terraform-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make jq

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Initialize Terraform
        run: make init
        working-directory: starexec-kubernetes/terraform

      - name: Validate Terraform configuration
        run: make validate
        working-directory: starexec-kubernetes/terraform

      - name: Configure AWS CLI region
        run: aws configure set region $AWS_REGION
        working-directory: starexec-kubernetes/terraform
      - name: Plan Terraform changes
        run: |
          if ! make plan; then
            echo "Plan failed or timed out, attempting to force unlock..."
            # Extract lock ID from the error output
            LOCK_ID=$(make plan 2>&1 | grep -o 'ID:.*[0-9a-f-]\{36\}' | cut -d' ' -f2 | head -1)
            if [ -n "$LOCK_ID" ]; then
              echo "Attempting to unlock with ID: $LOCK_ID"
              terraform force-unlock -force "$LOCK_ID" || true
            else
              echo "Could not extract lock ID, skipping unlock"
            fi
            echo "Retrying plan after unlock attempt..."
            make plan
          fi
        working-directory: starexec-kubernetes/terraform

      - name: Deploy infrastructure
        run: |
          if ! make default; then
            echo "Deploy failed or timed out, attempting to force unlock..."
            # Extract lock ID from the error output
            LOCK_ID=$(make default 2>&1 | grep -o 'ID:.*[0-9a-f-]\{36\}' | cut -d' ' -f2 | head -1)
            if [ -n "$LOCK_ID" ]; then
              echo "Attempting to unlock with ID: $LOCK_ID"
              terraform force-unlock -force "$LOCK_ID" || true
            else
              echo "Could not extract lock ID, skipping unlock"
            fi
            echo "Retrying deploy after unlock attempt..."
            make default
          fi
        working-directory: starexec-kubernetes/terraform
        env:
          AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
          DOMAIN: ${{ env.DOMAIN }}

      - name: Show cluster information
        run: make info
        working-directory: starexec-kubernetes/terraform

      - name: Notify deployment success
        if: success()
        run: echo "Deployment completed successfully!"

      - name: Notify deployment failure
        if: failure()
        run: echo "Deployment failed. Please check the logs."