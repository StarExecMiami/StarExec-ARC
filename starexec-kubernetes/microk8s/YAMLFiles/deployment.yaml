apiVersion: apps/v1
kind: Deployment
metadata:
  name: starexec
  labels:
    app: starexec
spec:
  replicas: 1
  selector:
    matchLabels:
      app: starexec
  template:
    metadata:
      labels:
        app: starexec
    spec:
      serviceAccountName: starexec-headnode
      initContainers:
      - name: init-volume
        image: ghcr.io/starexecmiami/starexec-arc:latest
        imagePullPolicy: IfNotPresent
        command:
          - sh
          - -c
          - >
            if [ "$(ls -A /mnt/vol-db)" ]; then echo "vol-db is not empty"; else cp -r /var/lib/mysql/* /mnt/vol-db/; fi &&
            if [ "$(ls -A /mnt/vol-star)" ]; then echo "vol-star is not empty"; else cp -r /home/starexec/* /mnt/vol-star/; fi &&
            if [ "$(ls -A /mnt/vol-pro)" ]; then echo "vol-pro is not empty"; else cp -r /project/* /mnt/vol-pro/; fi &&
            if [ "$(ls -A /mnt/vol-export)" ]; then echo "vol-export is not empty"; else cp -r /export/* /mnt/vol-export/; fi &&
            chown -R root:root /mnt/vol-db /mnt/vol-star /mnt/vol-pro /mnt/vol-export
        volumeMounts:
        - name: vol-db
          mountPath: /mnt/vol-db
        - name: vol-star
          mountPath: /mnt/vol-star
        - name: vol-pro
          mountPath: /mnt/vol-pro
        - name: vol-export
          mountPath: /mnt/vol-export
      containers:
      - name: starexec
        image: ghcr.io/starexecmiami/starexec-arc:latest
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "2"
            memory: "4Gi"
          requests:
            cpu: "1"
            memory: "2Gi"
        ports:
        - containerPort: 80
        - containerPort: 443
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - >
              # First check if MySQL is running
              mysqladmin ping -u root --silent --connect-timeout=5 &&
              # Then check if Tomcat has deployed the app
              grep -q "Deployment of web application archive" /project/apache-tomcat-7/logs/catalina.*.log &&
              # Check if Apache is running and listening
              service apache2 status | grep -q "running" &&
              # Finally check if the /starexec app is responding
              curl -s -k --max-time 5 -I https://localhost/starexec/ | grep -q "200 OK"
          initialDelaySeconds: 120
          periodSeconds: 15
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 15
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - >
              # Check if all critical services are running
              mysqladmin ping -u root --silent --connect-timeout=3 &&
              # Check Apache is running
              service apache2 status | grep -q "running" &&
              # Check if Tomcat is running
              ps -ef | grep -v grep | grep -q "org.apache.catalina.startup.Bootstrap"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - >
              # Check MySQL
              mysqladmin ping -u root --silent --connect-timeout=3 &&
              # Check Tomcat process is running
              ps -ef | grep -v grep | grep -q "org.apache.catalina.startup.Bootstrap" &&
              # Check Apache is starting or running
              (service apache2 status | grep -q "running" || pgrep -f "apache2")
          initialDelaySeconds: 20
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 60
        volumeMounts:
        - name: vol-db
          mountPath: /var/lib/mysql
        - name: vol-star
          mountPath: /home/starexec
        - name: vol-pro
          mountPath: /project
        - name: vol-export
          mountPath: /export
        - name: ssh-key
          mountPath: /root/.ssh/starexec_podman_key
          # subPath: starexec_podman_key
        - name: tls-certs
          mountPath: /etc/ssl/certs/localhost.crt
          subPath: tls.crt
        - name: tls-certs
          mountPath: /etc/ssl/private/localhost.key
          subPath: tls.key
        env:
        - name: SSH_USERNAME
          valueFrom:
            configMapKeyRef:
              name: starexec-config
              key: SSH_USERNAME
        - name: HOST_MACHINE
          valueFrom:
            configMapKeyRef:
              name: starexec-config
              key: HOST_MACHINE
        - name: SSH_PORT
          valueFrom:
            configMapKeyRef:
              name: starexec-config
              key: SSH_PORT
        - name: SSH_SOCKET_PATH
          valueFrom:
            configMapKeyRef:
              name: starexec-config
              key: SSH_SOCKET_PATH
      volumes:
      - name: vol-db
        persistentVolumeClaim:
          claimName: voldb
      - name: vol-star
        persistentVolumeClaim:
          claimName: volstar
      - name: vol-pro
        persistentVolumeClaim:
          claimName: volpro
      - name: vol-export
        persistentVolumeClaim:
          claimName: volexport
      - name: ssh-key
        secret:
          secretName: starexec-ssh-key
      - name: tls-certs
        secret:
          secretName: starexec-tls-secret # This secret is created by 'make mkcert-setup'
